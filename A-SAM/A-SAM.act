import "Control_Unit.act";
import "ALU.act";
import "Register_File.act";

//Original RAM taken from: https://github.com/asyncvlsi/stdlib/blob/main/std/mem.act
defproc RAM (chan?(int<1>) rw; chan?(int<32>) addr;
             chan?(int<32>) din;
             chan!(int<32>) dout)
{
  int<32> m[60];
  int<32> a;
  int<1> b;
  
  chp {
    
      m[0] := 0b00000000000000000001000000110111; //LUI 4096 to R0 
      m[1] := 0b00000000000000000011000010110111; //LUI 12288 to R1
      m[2] := 0b10000000000000000000000100010111; //AUIPC 2^31 + 2 to R2
      m[3] := 0b00000000001000001010000110110011; //SLT R3 = 1 if R1<R2 signed (false)
      m[4] := 0b00000000001000001011000110110011; //SLT R3=1 if R1<R2 unsigned (true)
      m[5] := 0b00000000110000000101000000010011; //SRLI R0 by 12 bits stored in R0, R0 is now 1
      m[6] := 0b00000000110000001101000010010011; //SRLI R1 by 12 bits stored in R0, R1 is now 3
      m[7] := 0b00000000000100000001000000010011; //SLLI R0 by 1 bits stored in R0, R0 is now 2 
      m[8] := 0b00000000001100000111001000010011; //R0 andi 3 = 2 stored in R4
      m[9] := 0b00000000000100000110001000010011; //R0 ori 1 = 3 stored in R4
      m[10] := 0b00000000001100000100001000010011; //R0 xori 3 = 1 stored in R4
      m[11] := 0b00000000000100010011001000010011; // Sltiu R2 <1 = false unsigned stored in R4
      m[12] := 0b00000000000100010010001000010011; //Slti R2 <1 = true signed stored in R4
      m[13] := 0b00000000010000000001000000110011; //Sll R0 << R4, R0 is now 4
      m[14] := 0b00000000010000000101000000110011; //Srl R0 >> R4, R0 is now 2
      m[15] := 0b01000000010000010101000100110011; //Sra R2 >> R4, R2 is now bigger than ever before
      m[16] := 0b00000000000100000000010000000011; // LB R8 = (M[R0 + 1])[7:0] i.e. M[3][7:0]
      m[17] := 0b00000000000100000100010000000011; // LBU R8 = (M[R0 + 1])[7:0] i.e. M[3][7:0]
      m[18] := 0b00000000000100000001010010000011; // LH R9 = (M[R0 + 1])[15:0] i.e. M[3][15:0]
      m[19] := 0b00000000000100000101010010000011; // LHU R9 = (M[R0 + 1])[15:0] i.e. M[3][15:0]
      m[20] := 0b00000000000100000010010100000011; // LW R10 = (M[R0 + 1]) i.e. M[3]
      m[21] := 0b00000000001000000000000010100011;// SB M[2 + 1] = R2[7:0]
      m[22] := 0b00000000001000000001000010100011;// SH M[2 + 1] = R2[15:0]
      m[23] := 0b00000000001000000010000010100011; // SW M[2 + 1] = R2
      m[24] := 0b00000000010000000000010111101111; //JAL Offset = 4 Store PC in R11
      m[28] := 0b00000001111000000000010111100111; //JALR PC = R0 + 30 = 32 Store PC in R11
      m[32] := 0b00000000000000000000011000010011; //ADDI R12 = R0 + 0 = 2
      m[33] := 0b00000000000100000000011010010011; //ADDI R13 = R0 + 1 = 3
      m[34] := 0b00000000000001100000001001100011; //BEQ R0, R12 OFFSET = 4
      m[38] := 0b11111110000001100001111011100011; //BNE R0, R12 OFFSET = -4 
      m[39] := 0b00000000000000100100001001100011; //BLT R4 < R0 OFFSET = 4 
      m[43] := 0b00000000010000000101001001100011; // BGE R0 > R4 OFFSET = 4 
      m[47] := 0b00000000001000100110001001100011; // BLTU R2 < R4 OFFSET = 4 
      m[51] := 0b00000000010000010111001001100011; // BGEU R2 > R4 OFFSET = 4 
      m[55] := 0b00000000000000000001000000110111;
      *[ addr?a,rw?b;
         [ b=0 -> din?m[a]; log("Received Address for write: ", a); log("Writing: ", m[a])
        [] b=1 -> dout!m[a]; log("Received Address for read: ", a)
         ]
       ]
    }
}

defproc ASAM() 
{
    Control_Unit CU;
    ALU AL;
    Reg_File RF;
    RAM Memory;

    Memory.rw = CU.mem_rw; 
    Memory.addr = CU.mem_address;
    Memory.din = CU.mem_write_data;
    Memory.dout = CU.mem_read_data;

    AL.input_1 = CU.alu_input1;
    AL.input_2 = CU.alu_input2;
    AL.op = CU.alu_sel;
    AL.out = CU.alu_output;

    RF.rw_chan = CU.reg_rw;
    RF.read_address1 =  CU.r_s1;
    RF.read_address2 = CU.r_s2;
    RF.write_address = CU.r_d;
    RF.read_out1 = CU.reg_read_data1;
    RF.read_out2 = CU.reg_read_data2;
    RF.write_in = CU.reg_write_data;
}